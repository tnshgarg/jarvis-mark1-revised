[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "mark1-orchestrator"
version = "0.1.0"
description = "Universal Plugin Orchestration System - Transform any GitHub repository into a functional plugin"
authors = ["Mark-1 Team <team@mark1.ai>"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/mark1-ai/orchestrator"
repository = "https://github.com/mark1-ai/orchestrator"
documentation = "https://docs.mark1.ai/orchestrator"
keywords = ["ai", "plugins", "orchestration", "github", "automation", "workflow"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence"
]
packages = [{include = "mark1", from = "src"}]

[tool.poetry.dependencies]
python = "^3.11"

# Core Framework
fastapi = "^0.104.1"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"
typer = "^0.9.0"

# LangChain Ecosystem (simplified for now)
# langchain = "^0.1.0"
# langchain-community = "^0.0.38"
# langgraph = "^0.0.20"
# langsmith = "^0.0.77"

# LLM Integration
ollama = "^0.1.7"
httpx = "^0.25.2"
openai = "^1.6.0"
anthropic = "^0.7.0"

# Database & Storage
redis = "^5.0.1"
chromadb = "^0.4.18"
sqlalchemy = "^2.0.23"
alembic = "^1.13.0"
psycopg2-binary = "^2.9.9"

# Code Analysis (simplified)
# tree-sitter = "^0.20.4"
# tree-sitter-python = "^0.23.0"
# tree-sitter-javascript = "^0.21.0"
libcst = "^1.1.0"

# Async & Concurrency
aiofiles = "^23.2.1"
aioredis = "^2.0.1"
celery = "^5.3.4"

# Monitoring & Logging
prometheus-client = "^0.19.0"
structlog = "^23.2.0"
rich = "^13.7.0"

# Security
cryptography = "^41.0.7"
pyjwt = "^2.8.0"

# Utilities
click = "^8.1.7"
python-dotenv = "^1.0.0"
jinja2 = "^3.1.2"
pyyaml = "^6.0.1"
toml = "^0.10.2"

# Plugin System Dependencies
gitpython = "^3.1.40"
docker = "^6.1.3"
virtualenv = "^20.24.6"
packaging = "^23.2"
requests = "^2.31.0"

# Development Dependencies
[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
black = "^23.11.0"
isort = "^5.12.0"
flake8 = "^6.1.0"
mypy = "^1.7.1"
pre-commit = "^3.6.0"
bandit = "^1.7.5"

# Documentation
sphinx = "^7.2.6"
sphinx-rtd-theme = "^1.3.0"
myst-parser = "^2.0.0"

[tool.poetry.scripts]
mark1 = "mark1.main:app"
mark1-cli = "mark1.api.cli:main"

[tool.poetry.extras]
all = [
    "fastapi", "uvicorn", "redis", "chromadb", 
    "sqlalchemy", "prometheus-client", "rich"
]
minimal = ["typer", "pydantic", "structlog"]

# Black Configuration
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort Configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["mark1"]
known_third_party = [
    "fastapi", "pydantic", "ollama", 
    "redis", "sqlalchemy", "structlog"
]

# MyPy Configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "chromadb.*",
    "ollama.*"
]
ignore_missing_imports = true

# Pytest Configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests"
]

# Coverage Configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/__pycache__/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:"
]